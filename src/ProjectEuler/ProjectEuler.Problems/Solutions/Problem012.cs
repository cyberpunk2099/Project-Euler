using System.Collections.Generic;
using System.Linq;

namespace ProjectEuler.Problems.Solutions
{
    public class Problem012 : IProblem
    {
        public int Id => 12;
        public string Title => "Highly divisible triangular number";

        public string Description =>
            "The sequence of triangle numbers is generated by adding the natural numbers. \r\n" +
            "So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.          \r\n" +
            "The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...   \r\n\r\n" +
            "Let us list the factors of the first seven triangle numbers:                 \r\n" +
            "   1: 1             \r\n" +
            "   3: 1,3           \r\n" +
            "   6: 1,2,3,6       \r\n" +
            "  10: 1,2,5,10      \r\n" +
            "  15: 1,3,5,15      \r\n" +
            "  21: 1,3,7,21      \r\n" +
            "  28: 1,2,4,7,14,28 \r\n" +
            "We can see that 28 is the first triangle number to have over five divisors. \r\n\r\n" +
            "What is the value of the first triangle number to have over five hundred divisors?";

        public string GetSolution()
        {
            var pos = 0;
            var num = 0;
            var divisors = 0;
            while (divisors <= 500)
            {
                num += ++pos;
                divisors = GetDivisors(num).Count();
            }
            return $"{num}  ({divisors} divisors)";
        }

        private static IEnumerable<int> GetDivisors(int num)
        {
            for (int i = 1; i * i <= num; i++)
            {
                if (num % i != 0) continue;
                yield return i;
                if (i * i != num)
                    yield return num / i;
            }
            yield return num;
        }
    }
}
